<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Zach Marino</title>
        <link>https://zmarino.com/posts/</link>
        <description>Recent content in Posts on Zach Marino</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 01 Nov 2024 17:16:35 -0400</lastBuildDate><atom:link href="https://zmarino.com/posts/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Abacus</title>
        <link>https://zmarino.com/posts/abacus/</link>
        <pubDate>Fri, 01 Nov 2024 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/abacus/</guid>
        <description>&lt;img src="https://zmarino.com/posts/abacus/Abacus.webp" alt="Featured image of post Abacus" /&gt;&lt;p&gt;Abacus is a spreadsheet application I developed with Trey Olimpo and Oliver Orthwein in my Fundamentals of Software Engineering class. I handled all frontend and API development, while they handled the central spreadsheet logic. Our professor gave us a set of core requirements that we needed to implement, as well as having us develop and implement three additional features.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;We were given the following core requirements for our spreadsheet:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The spreadsheet must allow cells to contain numeric constants, string constants, cell
references, range expressions, and formulas&lt;/li&gt;
&lt;li&gt;The spreadsheet must check for error conditions that may arise and adopt a consistent policy
for handling these. It is up to you to determine what error conditions may occur!&lt;/li&gt;
&lt;li&gt;The spreadsheet must enable the user to insert a row, insert a column, delete a row, delete
a column, and clear the contents of a cell. After performing an insert/delete operation,
formulas should refer to the same cells that they referenced before the operation&lt;/li&gt;
&lt;li&gt;The project must produce a useful web-based user interface that is created using React&lt;/li&gt;
&lt;li&gt;The main logic for your application must be written in TypeScript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;We chose the following three additional features for our spreadsheet:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cell styling: Ability to adjust cosmetic properties of a cell, including making text bold, italics, or strikethrough; Changing the color of the text or cell; and adding borders and different border styles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Undo/Redo function: Ability to revert to a previous spreadsheet version and vice versa.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import/Export function: Ability to import a CSV file and export a CSV or SQL INSERT file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spreadsheet-design&#34;&gt;Spreadsheet design
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.figma.com/design/7fK9op1Ncvsx2v1PE3g8RF/Spreadsheet-Application-Prototype?node-id=92-8&amp;amp;t=kt8Sh72wE7GaveoN-1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Link to full file&lt;/a&gt;&lt;/p&gt;

&lt;iframe 
    src=&#34;https://embed.figma.com/design/7fK9op1Ncvsx2v1PE3g8RF/Spreadsheet-Application-Prototype?node-id=92-9&amp;amp;embed-host=share&#34;
    style=&#34;ZgotmplZ&#34;
    width=&#34;100%&#34;
    height=&#34;700&#34;
    frameborder=&#34;0&#34;
    allowfullscreen&gt;
&lt;/iframe&gt;

&lt;p&gt;Since this was a coding project, we were not asked to do user testing. We weren&amp;rsquo;t even asked to make anything more than a basic wireframe. I took the time to build out a full prototype because while I did lose out on coding time, I felt that doing this would significantly reduce the time it would take to flesh out the layout and style components down the line. This turned out to be true. Prototyping helped me figure out the structure to make the toolbar and formula bar responsive to different screens.&lt;/p&gt;
&lt;p&gt;The prototype also helped me flesh out the code structure for my buttons. The structure of creating a generic button component that accepted different SVG icons in Figma was implemented precisely in code and helped abstract a large amount of redundant code. &lt;strong&gt;This exercise in turning prototypes into code reinforces my belief that knowing how to code as a designer can significantly improve the coding experience for developers.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;frontend-architecture&#34;&gt;Frontend Architecture
&lt;/h2&gt;&lt;p&gt;We were free to create the frontend whichever way we wanted, so long as it rendered what the backend did. Most other teams decided to re-render their spreadsheet whenever a change occurred but we decided to take a different approach. Since our project had a large emphasis on individual cell customization, we wanted to make sure it was possible to re-render an individual cell when that was the only change. The whole spreadsheet would still need to be re-rendered when cell locations changed, but if the only change was the property of a single cell, then there was no need to re-render everything else.&lt;/p&gt;
&lt;p&gt;We implemented this by creating two React contexts, SelectedCellContext and GridContext.&lt;/p&gt;
&lt;h3 id=&#34;selectedcellcontext&#34;&gt;SelectedCellContext
&lt;/h3&gt;&lt;p&gt;SelectedCellContext would track the currently selected cell and handle updates. Specifically, I had a function called updateSelectedCellProperty() which would take in a property and a value and pass that into a POST request which would update the property in the backend. updateSelectedCellProperty() would then increment a useState hook called setUpdateTrigger which would trigger the context to fetch the updated cell data via another function. That function would set the cell data in a useState hook and that hook is then passed into the instance of the cell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// SelectedCellContext.tsx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Update specific properties of the selected cell
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateSelectedCellProperty&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;void&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectedCell&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;`/api/cells/update/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON.stringify&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;setUpdateTrigger&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Trigger a re-fetch of the selected cell
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchCellData&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// Re-fetch the cell data to reflect the change
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;`Property &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; of cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) updated to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;`Error updating property &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; of selected cell:`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gridcontext&#34;&gt;GridContext
&lt;/h3&gt;&lt;p&gt;Entire spreadsheet re-rendering is actually handled in the spreadsheet component itself using useMemo hooks, but we needed a way to track when to re-render. This was especially the case when the amount of rows and columns would change. GridContext would track this and GridDataProvider would support it too. The custom hook below would handle the initial render of rows and columns.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// GridDataProvider.tsx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;useEffect&lt;/span&gt;(() &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initializeGridDimensions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Fetch all cell data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/cells&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to fetch cell data&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cellData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Find the maximum column and row indices
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxCol&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxRow&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;cellData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;cell&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; }) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;maxCol&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxCol&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cell&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;maxRow&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxRow&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cell&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Add some padding to the maximum dimensions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paddingCells&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;setColumns&lt;/span&gt;(Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxCol&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paddingCells&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// Minimum of 5 columns
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;setRows&lt;/span&gt;(Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxRow&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paddingCells&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// Minimum of 10 rows
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error initializing grid dimensions:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Fall back to default dimensions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;setColumns&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;setRows&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;initializeGridDimensions&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, [&lt;span style=&#34;color:#a6e22e&#34;&gt;setColumns&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;setRows&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;layout&#34;&gt;Layout
&lt;/h2&gt;&lt;p&gt;As mentioned earlier, I used Figma to prototype the responsiveness of our prototype, specifically making the toolbar and formula bar responsive. I structured the toolbar in a way that mimicked how it would be done using HTML and flexboxes. At larger sizes, the toolbar is one long line but as the page gets smaller, it becomes two. Making the screen size any smaller would make the toolbar three lines which was not very user-friendly so I set a minimum width for the toolbar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/abacus/resize.gif&#34;
	width=&#34;1200&#34;
	height=&#34;123&#34;
	srcset=&#34;https://zmarino.com/posts/abacus/resize_hu4689593051436959987.gif 480w, https://zmarino.com/posts/abacus/resize_hu13955646133902915523.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Header bar resizing&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;975&#34;
		data-flex-basis=&#34;2341px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To position the header above the actual spreadsheet, I created a split-screen layout component that structured the page using flexboxes. Besides being the easiest approach, I did this with a dedicated layout component because it is best practice to have position logic separated from component logic to retain the reusable nature of components.&lt;/p&gt;
&lt;p&gt;App.tsx was the main entry point for the frontend and contained the calls to the primary contexts and layout components.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// App.tsx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;GridProvider&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialColumns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;initialRows&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;GridDataProvider&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;SelectedCellProvider&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;SplitScreen&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;child1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Header&lt;/span&gt; /&amp;gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;child2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Spreadsheet&lt;/span&gt; /&amp;gt;} /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;SelectedCellProvider&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;GridDataProvider&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;GridProvider&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;api&#34;&gt;API
&lt;/h2&gt;&lt;p&gt;Our API was a pretty straightforward Express router setup. My partners created public-facing methods to access the Spreadsheet Model and the API calls those getter and setter methods. This separation between the backend and frontend lets us sanitize inputs and outputs, preventing errors in the backend or frontend from affecting each other. updateSelectedCellProperty() (from SelectedCellContext) would send POST requests to a large route that had a switch case for each possible cell property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// POST: Update a cell&amp;#39;s property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/api/cells/update/:property/:col/:row&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Response&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Use `value` instead of `body` for clarity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parseInt(&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rowIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parseInt(&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleSpreadsheet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setCellContent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rowIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Cell content updated to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; successfully!`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleSpreadsheet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toggleCellBold&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rowIndex&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) updated to bold.`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleSpreadsheet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toggleCellItalic&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rowIndex&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) updated to italic.`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;strikethrough&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleSpreadsheet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toggleCellStrikethrough&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rowIndex&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) updated to strikethrough.`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleSpreadsheet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setCellFont&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rowIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) font updated to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fontSize&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleSpreadsheet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setCellFontSize&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rowIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) font size updated to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fontColor&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fontColorNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parseInt(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Convert hex string to number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleSpreadsheet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setCellFontColor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rowIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fontColorNumber&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) font color updated to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fontColorNumber&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cellColor&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colorNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parseInt(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Convert hex string to number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleSpreadsheet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setCellColor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rowIndex&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;colorNumber&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) color updated to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;colorNumber&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Invalid property: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Error updating &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; for cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;):`&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Failed to update &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; for cell (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;).`&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;challenges--lessons-learned&#34;&gt;Challenges &amp;amp; Lessons Learned
&lt;/h2&gt;&lt;p&gt;Before starting this project, my knowledge of React ended with component creation and styling. I could make and style components quickly but I was completely lost in adding any functionality. This project gave me a crash course in hooks, contexts, states, and even creating overlays. Since React was not a focus of the class besides basic interactions, I had to teach myself all of these new concepts.&lt;/p&gt;
&lt;p&gt;I think the quality of my code could certainly be improved. SelectedCellContext works fine for handling individual cells, but re-rendering the entire spreadsheet when cell locations changed was a bit sloppy. As well, clicking on a cell fetches that cell&amp;rsquo;s data twice as it&amp;rsquo;s used multiple times. If I had more time on this project, I probably could have consolidated these calls. The data we send and receive is already lower than other groups due to how we refresh individual cells but doubling the amount of calls would add up with larger spreadsheets. Despite these shortcomings, I&amp;rsquo;m proud of how far I got using a previously unfamiliar system.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Pitch - CAMD Directed Study</title>
        <link>https://zmarino.com/posts/pitch/</link>
        <pubDate>Fri, 01 Nov 2024 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/pitch/</guid>
        <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Pitch is a design kit that provides journalists with a more structured avenue for brainstorming story ideas. I created this card deck for my CAMD directed study to answer the question of what it means to think like a designer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Details about specific stages can be found in the presentation deck below&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;presentation-deck&#34;&gt;Presentation Deck
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.figma.com/deck/H1QxQ68WMjtA6wrn0egYWp/Pitch-Project-Presentation?node-id=1-587&amp;amp;t=hQcllipM7sx6iXAP-1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Link to Presentation&lt;/a&gt;

&lt;iframe 
    src=&#34;https://embed.figma.com/slides/H1QxQ68WMjtA6wrn0egYWp/Pitch-Project-Presentation?node-id=1-587&amp;amp;embed-host=share&#34;
    style=&#34;ZgotmplZ&#34;
    width=&#34;800&#34;
    height=&#34;650&#34;
    frameborder=&#34;0&#34;
    allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2 id=&#34;part-1-user-research-slide-2&#34;&gt;Part 1: User Research (Slide 2)
&lt;/h2&gt;&lt;h3 id=&#34;user-interviews-slide-3&#34;&gt;User Interviews (Slide 3)
&lt;/h3&gt;&lt;p&gt;I officially interviewed four people for this project: &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/katrina-liu-1311a218b/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Katrina Liu&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/eli-cloutier-7249a6264/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Eli Cloutier&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.bostonglobe.com/about/staff-list/columnist/brian-mcgrory/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Brian McGrory&lt;/a&gt;, and &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/turneremily/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Emily Turner&lt;/a&gt;. Katrina and Eli are new reporters while Brian and Emily are editors. Unofficially, I discussed ideas with &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/emily-wyrwa220/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Emily Wyrwa&lt;/a&gt; (a future user tester) and I used the knowledge I gained as a product management co-op at the Boston Globe to support my research. I collated my interviews into three primary takeaways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There is a “sixth sense” for finding a good pitch. Finding a good pitch is an art, not a science, but it can still be trained.&lt;/li&gt;
&lt;li&gt;There is no longer an appetite for record-only journalism in the media industry.&lt;/li&gt;
&lt;li&gt;Innovation is needed in this traditional industry to become “relentlessly interesting.”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also gleaned a set of 12 pain points from my interviews that would influence future ideas for the project.&lt;/p&gt;
&lt;h3 id=&#34;journey-map-slides-11&#34;&gt;Journey Map (Slides 11)
&lt;/h3&gt;&lt;p&gt;With my takeaways and data from my user interviews, I combined that information with the journalistic process I observed at the Boston Globe to develop a Journey Map for the journalistic process. This journey map details each stage of the process from Ideation to publication, as well as what success looks like at each stage. This map helped me document the different stages of the process and where/what my solution could address.&lt;/p&gt;
&lt;h2 id=&#34;part-2-contextual-research-slide-19&#34;&gt;Part 2: Contextual Research (Slide 19)
&lt;/h2&gt;&lt;h3 id=&#34;what-is-a-design-kit-slide-20&#34;&gt;What is a design kit? (Slide 20)
&lt;/h3&gt;&lt;p&gt;Before I could develop my solution, I first had to determine what a design kit was in the first place I looked at three existing design kits to get a better idea:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.trytriggers.com/shop-triggers-tools/p/storytelling-deck&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Storytelling Deck by triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nesta.org.uk/toolkit/diy-toolkit/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DIY Toolkit by Nesta, STBY, Quicksand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://beautifultrouble.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Beautiful Trouble by Beautiful Trouble&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I identified some characteristics of each design kit that I could incorporate into my project, as well as general qualities that made the design kit function. I collated all of this research into the following definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A design kit is a collection of exercises, templates, and case studies to facilitate some kind of design process. That process is dictated by the subject matter of the design kit and can focus on a specific aspect of design or be a full walkthrough of the process. &lt;strong&gt;The goal of a design kit is to break up a large project into smaller, more focused chunks to arrive at a more quality solution.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I specifically conducted a &lt;strong&gt;comparative analysis (Slide 24)&lt;/strong&gt; on Beautiful Trouble to determine how they categorize and style their cards. I used Nielson&amp;rsquo;s 10 usability heuristics to better understand what made the cards work. I noted their use of color and iconography to determine category, and their use of a QR code to reduce the complexity of the card.&lt;/p&gt;
&lt;h2 id=&#34;part-3-ideation-and-refinement-slide-26&#34;&gt;Part 3: Ideation and Refinement (Slide 26)
&lt;/h2&gt;&lt;h3 id=&#34;how-might-we-statements-and-ideas-slide-27&#34;&gt;&amp;ldquo;How Might We&amp;rdquo; Statements and Ideas (Slide 27)
&lt;/h3&gt;&lt;p&gt;With all of this research and the pain points I gathered from my user interviews, I put it all together to create some &amp;ldquo;How Might We&amp;rdquo; Statements. I wrote six and ended up focusing on three:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How might we help journalists brainstorm story ideas?&lt;/li&gt;
&lt;li&gt;How might we identify the variables required for an engaging story?&lt;/li&gt;
&lt;li&gt;How might we provide journalists with a toolkit for idea gathering?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My project ultimately followed the third HMW statement but at the time of creating these statements, I brainstormed four potential ideas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(HMW 1) Brainstorming cards. Can either be a set of cards that guide what to look for in a story or different prompts that encourage brainstorming&lt;/li&gt;
&lt;li&gt;(HMW 2) Data visualization of what articles are doing well via various metrics that can be tracked&lt;/li&gt;
&lt;li&gt;(HMW 2) Making the already available data more accessible to journalists through a template-esque solution (with support from backend newsroom staff)&lt;/li&gt;
&lt;li&gt;(HMW 3) An application that stores different resources, like links to social media, local newsletters, government data, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;storyboard-slide-29&#34;&gt;Storyboard (Slide 29)
&lt;/h3&gt;&lt;p&gt;The idea that seemed the most feasible based on my research and a discussion with a journalist friend was the brainstorming cards so I pushed forward and developed a storyboard. The storyboard features a user who is given a pitch by their editor and uses the cards to support the development of the story she is writing. This storyboard featured cards with content that extended past idea generation because it seemed doable at the time but user testing would determine this to not be as feasible as previously thought.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/Storyboard.png&#34;
	width=&#34;4968&#34;
	height=&#34;3855&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/Storyboard_hu1111035182139425307.png 480w, https://zmarino.com/posts/pitch/Storyboard_hu3947238707249982926.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Storyboard&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;309px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;part-4-prototype-slide-30&#34;&gt;Part 4: Prototype (Slide 30)
&lt;/h2&gt;&lt;h3 id=&#34;paper-prototype-slide-31&#34;&gt;Paper Prototype (Slide 31)
&lt;/h3&gt;&lt;p&gt;I tested my paper prototype with Emily Wyrwa and the initial results were promising. We were able to develop a potential pitch in 17 minutes using the cards (as opposed to a usual time of what can be several hours). The potential pitch she developed was accepted by her editor but the subject of the idea unfortunately did not respond to an interview request. As mentioned earlier, at this point in the project I had cards with content that extended past idea generation. This prototype had a category for each step of the journalistic process but we determined that taking on every step of the process proved to be too wide of a net. Focusing on idea generation would make for a more focused design kit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/Paper_Prototype.png&#34;
	width=&#34;4853&#34;
	height=&#34;1366&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/Paper_Prototype_hu3970440304239393782.png 480w, https://zmarino.com/posts/pitch/Paper_Prototype_hu3137078838710667785.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Paper Prototype&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;355&#34;
		data-flex-basis=&#34;852px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;mental-model-slide-32&#34;&gt;Mental Model (Slide 32)
&lt;/h3&gt;&lt;p&gt;Now that I was focusing on just idea generation, I needed to flesh out how I would categorize the cards. Using my comparative analysis and observations from my user testing I developed the following mental model:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/Mental_model.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/Mental_model_hu15615213972582595346.png 480w, https://zmarino.com/posts/pitch/Mental_model_hu17085612505141810332.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Mental model for card categories&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Game cards are essentially larger activities that can incorporate prompt and topic cards. Prompt cards are guided questions to kick off idea generation, and topic cards are evergreen topics that can serve as inspiration for new stories and styles.&lt;/p&gt;
&lt;h3 id=&#34;low-fidelity-prototype-slide-33&#34;&gt;Low-Fidelity Prototype (Slide 33)
&lt;/h3&gt;&lt;p&gt;My first prototype was in color to simulate the categories but overall, it was very simple. I printed them out on paper and then glued the sides to cardstock to give them more weight. The initial name idea I had was &amp;ldquo;Heartlines&amp;rdquo; which was a play on Headlines and the &amp;ldquo;heart&amp;rdquo; of human interest stories. It was a clever name on paper but sounded medical so it was scrapped.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/lofi.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/lofi_hu16274405073906163262.png 480w, https://zmarino.com/posts/pitch/lofi_hu7333557012190627657.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Low-Fidelity Prototype&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;user-testing-slide-35&#34;&gt;User Testing (Slide 35)
&lt;/h3&gt;&lt;p&gt;The card design was subject to change but the content of the cards was a separate entity that could be tested. I held a user testing session with &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/emily-wyrwa220/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Emily Wyrwa&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/daisylevine/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Daisy Levine&lt;/a&gt;, and &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/luke-scotchie/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Luke Scotchie&lt;/a&gt; to determine if the card content was successful as the initial paper prototype was. I noted down their words, actions, and body language to determine how they were interacting with my card deck. I also tracked quantitative measures like the time it took to develop a viable pitch to get hard statistics on the efficacy of my solution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/testing1.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/testing1_hu18038761564731532568.png 480w, https://zmarino.com/posts/pitch/testing1_hu2032392790531040199.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;
&lt;img src=&#34;https://zmarino.com/posts/pitch/testing2.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/testing2_hu5430438561308159039.png 480w, https://zmarino.com/posts/pitch/testing2_hu14068756897299676757.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As I was putting the final pieces together for this project, I was given updates on the pitches they developed during the session. Tester 1 is actively researching and interviewing for their reproductive health story, and Tester 2 is doing the same with theirs. Tester 1 also adapted an idea Tester 3 had &lt;a class=&#34;link&#34; href=&#34;https://www.bostonglobe.com/2024/12/20/arts/sweet-spot-boston-public-art-triennial-accelerator/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;into an article that was recently published in the Boston Globe.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;moodboards-slide-38&#34;&gt;Moodboards (Slide 38)
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/newsroom.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/newsroom_hu17451753861388013153.png 480w, https://zmarino.com/posts/pitch/newsroom_hu10236729813811971610.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;
&lt;img src=&#34;https://zmarino.com/posts/pitch/future-making.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/future-making_hu17326442148556745479.png 480w, https://zmarino.com/posts/pitch/future-making_hu15799820398250435108.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After user testing, I created two mood boards to ideate on the aesthetics and vibe I wanted the visual design of my card deck to have. The first mood board was focused around the classic Newsroom vibe, with the rigid black and white structure of a print newspaper and the official and serious feeling of a large newsroom.&lt;/p&gt;
&lt;p&gt;My second mood board was focused on innovation, big data, and abstract shapes. I named this &amp;ldquo;future-making&amp;rdquo;. This mood board was purposely very out there and fun to serve as a juxtaposition to the first mood board. The style I would eventually end up with is a mixture of both.&lt;/p&gt;
&lt;h3 id=&#34;medium-fidelity-prototype-slide-40&#34;&gt;Medium-Fidelity Prototype (Slide 40)
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/medfi.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/medfi_hu2856224967432796689.png 480w, https://zmarino.com/posts/pitch/medfi_hu17636783534367830213.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;My medium-fidelity prototype was an improvement over my first prototype but still needed a lot of work. I liked the structure of information on the front side of the cards but I was having trouble with how I wanted the back side to look. I tried to mimic the look of a newspaper but it was too busy to see at a glance if it was the front or back of the card.&lt;/p&gt;
&lt;h3 id=&#34;logo-design-slide-41&#34;&gt;Logo Design (Slide 41)
&lt;/h3&gt;&lt;p&gt;I began prototyping the name and logo by rapidly identifying different concepts and objects related to journalism, ideation, and sources. I would then pick an interesting word or concept and go further in that direction to identify potential names. This is a similar approach to the &amp;ldquo;Rabbit Holes&amp;rdquo; card in my card deck. The three potential names I conceived during this brainstorming session were Roladeck, Sources, and Pitch Deck. Of the three, I went with Pitch Deck.&lt;/p&gt;
&lt;p&gt;I started sketching out some potential logos that would be placed on the backside of a card. I showed these sketches to my roommates who liked the third idea. We decided it would look and sound better as just &amp;ldquo;Pitch&amp;rdquo; so we dropped the &amp;ldquo;Deck&amp;rdquo;. Saying &amp;ldquo;Pitch Deck&amp;rdquo; was implied anyway as Pitch is a card deck. I traced out a cleaner version of the logo and traced it digitally in Adobe Illustrator.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/logo1.png&#34;
	width=&#34;2556&#34;
	height=&#34;2461&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/logo1_hu3764301767482443550.png 480w, https://zmarino.com/posts/pitch/logo1_hu288602223074819568.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;249px&#34;
	
&gt;
&lt;img src=&#34;https://zmarino.com/posts/pitch/logo2.png&#34;
	width=&#34;2321&#34;
	height=&#34;1247&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/logo2_hu13223571995314491640.png 480w, https://zmarino.com/posts/pitch/logo2_hu11244157667211109188.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The final logo features a pen to represent the tool and job of a journalist, and the speech bubble represents the conversational nature of pitching an idea, as pitching an idea to your editor and vice versa is typically just a conversation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/logo3.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/logo3_hu12864129437234805431.png 480w, https://zmarino.com/posts/pitch/logo3_hu18356931956495977186.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;final-prototypewebsite&#34;&gt;Final Prototype/Website
&lt;/h3&gt;&lt;p&gt;I determined from my user testing that the card content was successful, but there was still work to be done. The card content needed to be more clear and concise to fit the instructions on a single card without sacrificing comprehension of the instructions. I also realized that the size of a QR code scales with the amount of text so the example QR code I was using was much smaller than my actual QR codes would be. My solution was to both make the cards more concise but also increase the size of the cards. I switched from poker-sized cards to tarot-sized cards. I picked tarot size because it was big enough to fit the content without being so big that they were hard to use as cards. I improved the information structure of the medium fidelity prototype and ditched the icons as they felt tacky compared to just text and color. I replaced the back side of the card with a solid color and the logo. I also created an instruction and credit card.&lt;/p&gt;
&lt;p&gt;The cards are a physical product but the easiest way to get my card deck to other people for use is digitally. I created a companion website to house all of the cards so that any journalist can use it for free. I coded the website using React and Typescript, deploying via Vite and Vercel. This website was beyond the scope of the project but something I wanted to work on myself to improve my coding skills. &lt;a class=&#34;link&#34; href=&#34;https://pitchjourno.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Click here to see the website.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/homebg.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;part-5-reflection-slide-44&#34;&gt;Part 5: Reflection (Slide 44)
&lt;/h2&gt;&lt;h3 id=&#34;impact&#34;&gt;Impact
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/impact.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/impact_hu10322464366337199659.png 480w, https://zmarino.com/posts/pitch/impact_hu6715612137139907691.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;what-does-it-mean-to-think-like-a-designer&#34;&gt;What does it mean to think like a designer?
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/pitch/designer.png&#34;
	width=&#34;5334&#34;
	height=&#34;3000&#34;
	srcset=&#34;https://zmarino.com/posts/pitch/designer_hu7449231747101555486.png 480w, https://zmarino.com/posts/pitch/designer_hu8784289437680806793.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TalentTrace</title>
        <link>https://zmarino.com/posts/talenttrace/</link>
        <pubDate>Thu, 15 Aug 2024 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/talenttrace/</guid>
        <description>&lt;img src="https://zmarino.com/posts/talenttrace/TalentTrace.png" alt="Featured image of post TalentTrace" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;TalentTrace is a job tracker and aggregate job data app that my group and I created for our final project in CS3200 Database Design. Users can add jobs entries to TalentTrace and see all of their applications at a glance. They can also see aggregate data from all job entries to see and analyze market trends. Recruiters can use TalentTrace to keep track of applicants and any interviews they have with them. The project repository can be found on my github or by clicking the button below.&lt;/p&gt;

&lt;a href=&#34;https://github.com/zachmarino234/TalentTrace&#34; class=&#34;btn btn-primary&#34; target=&#34;_blank&#34;&gt;
    Repository
&lt;/a&gt;
  
&lt;h2 id=&#34;tech-stack&#34;&gt;Tech Stack
&lt;/h2&gt;&lt;p&gt;Our tech stack consists of MySQL for the database, Flask for the backend, and Streamlit for the frontend. This stack was provided to us in a template created by our professor that we forked. Each tier was containerized using docker. While DevOps was not the focus of this project, since finishing this project I have investigated and learned how to setup a similar tech stack and containerize every tier.&lt;/p&gt;
&lt;h3 id=&#34;database&#34;&gt;Database
&lt;/h3&gt;&lt;p&gt;Our database is coded in MySQL and contains a DDL file as well as several files housing mock data generated by &lt;a class=&#34;link&#34; href=&#34;https://www.mockaroo.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mockaroo&lt;/a&gt;. Before coding the database files, we first did a very basic design iteration and identified our users and their needs. We then took those needs and translated them into a large Entity-Relationship diagram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/talenttrace/ER-diagram.webp&#34;
	width=&#34;9120&#34;
	height=&#34;3168&#34;
	srcset=&#34;https://zmarino.com/posts/talenttrace/ER-diagram_hu10766316028567349892.webp 480w, https://zmarino.com/posts/talenttrace/ER-diagram_hu17367962809626122217.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Entity-Relationship Diagram (Click on image for better quality)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;287&#34;
		data-flex-basis=&#34;690px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;With the diagram ready to go, we translated it into a DDL file which was set to run every time the MySQL docker container was spun up using &lt;code&gt;docker compose up db&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;backend-api&#34;&gt;Backend API
&lt;/h3&gt;&lt;p&gt;We built our API using Flask. Our professor provided the template for the project so all setup was done for us, we just needed to create routes and blueprints to connect the database to the frontend. We created a blueprint for each entity that required a route like job entries, users, etc. We also had a route for all of our aggregate queries. An alternative method to connect the database to the frontend would have been to create a couple of large routes and running any specific queries in the frontend using pandas but that would have been bad practice. It is better to keep the database and frontend as separate as possible, and it was easier to just create extra routes or abstract already made routes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/talenttrace/backend.png&#34;
	width=&#34;1262&#34;
	height=&#34;670&#34;
	srcset=&#34;https://zmarino.com/posts/talenttrace/backend_hu9941428779200126990.png 480w, https://zmarino.com/posts/talenttrace/backend_hu13926516439020606257.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example of a GET route for the aggregate data page&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;452px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;frontend&#34;&gt;Frontend
&lt;/h3&gt;&lt;p&gt;Our frontend was built with Streamlit, a data visualization tool written in python. Streamlit was not built to run an application like our project, but the focus of the class was not on front-end development and Streamlit was easy to pick up as everything is prebuilt. We mocked user authentication using buttons and session states and created flows for each persona. Each persona needed to have a GET, PUT, POST, and DELETE route. Our project was not graded on UX or visual design, but considering my skillset, I wanted to add some design elements to make sure our app felt good to use despite the limited framework. We added confirmation messages to any forms, downloaded more advanced data viz frameworks to better display the data, and I created a logo to add an extra touch of cohesiveness to our project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/talenttrace/frontend.png&#34;
	width=&#34;3024&#34;
	height=&#34;1594&#34;
	srcset=&#34;https://zmarino.com/posts/talenttrace/frontend_hu14423125621602959699.png 480w, https://zmarino.com/posts/talenttrace/frontend_hu14148629253610771638.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Aggregate job data page from the system administrator persona&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;logo&#34;&gt;Logo
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/talenttrace/logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;TalentTrace logo designed by me&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t want to spend too much time with the logo as it did not impact our grade but I still wanted to make something interesting (or at least better than the AI generated logos other teams were using). The &amp;ldquo;trace&amp;rdquo; in TalentTrace reminded me of a light/spotlight which is represented by the yellow streak that runs through the two T&amp;rsquo;s. The blue was chosen because it complemented well with the yellow when I was picking colors. The geometric look was used because we felt it looked professional without being generic.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Prior to this class, my last computer science class was Algorithms which really killed a lot of my interest in computer science. This project brought my enthusiasm back. It was incredibly fun learning how to bring all of these different parts of software engineering together into a cohesive product. I feel like I finally see the full picture in regards to what I&amp;rsquo;ve been learning and it also made me realize I don&amp;rsquo;t want to do &lt;em&gt;just&lt;/em&gt; design or computer science, I want to do both. I still find backend development (specifically algorithms) intimidating but I didn&amp;rsquo;t expect to enjoy databases as much as I did.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Chain - A Word Connecting Card Game</title>
        <link>https://zmarino.com/posts/chain/</link>
        <pubDate>Sat, 02 Dec 2023 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/chain/</guid>
        <description>&lt;img src="https://zmarino.com/posts/chain/Chain%20logo.png" alt="Featured image of post Chain - A Word Connecting Card Game" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Chain is a card game I designed in a group in Design Perspectives (ARTG1001) taught by Northeastern Professor Lee Moreau during the Fall 2023 semester. There were no rules on what our game had to be or how it was played, it just had to be accessible to most skill levels. My job in the group was to develop the rules for the game.&lt;/p&gt;
&lt;p&gt;I took on the ruleset because prior to this project, a majority of my design work had been for a digital medium so I wanted to explore a physical medium and challenge myself with a new type of design. My groupmates worked on the visual design of the cards and the instructions, and we all contributed to the list of words we would put on the cards.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To see the detailed design doc click the button below.&lt;/strong&gt; ⬇️&lt;/p&gt;

&lt;a href=&#34;Game-process-portfolio.pdf&#34; class=&#34;btn btn-primary&#34; target=&#34;_blank&#34;&gt;
    Design Doc
&lt;/a&gt;
  
</description>
        </item>
        <item>
        <title>Alloc8 - Personal Finance Project</title>
        <link>https://zmarino.com/posts/alloc8/</link>
        <pubDate>Fri, 01 Dec 2023 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/alloc8/</guid>
        <description>&lt;img src="https://zmarino.com/posts/alloc8/Alloc8%20logo.png" alt="Featured image of post Alloc8 - Personal Finance Project" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Alloc8 is a personal finance app that I created in ARTG 2400 Interaction Design Principles, taught by Professor Sofie Hodara, for my final project. We started in small groups and did user research together, interviewing our friends and family about their personal finance habits. From these user interviews we developed an idea of what users wanted from a personal finance app, and created our own seperate prodicts to solve this design issue. I ended up on a personal finance app that automatically allocates your paycheck into rent, budgets, spending goals, etc. as decided by the user, and the extra money left over can be used to either temporarily increase budgets or add to other goals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To see the detailed design doc click the button below.&lt;/strong&gt; ⬇️&lt;/p&gt;

&lt;a href=&#34;Alloc8-Process-Portfolio.pdf&#34; class=&#34;btn btn-primary&#34; target=&#34;_blank&#34;&gt;
    Design Doc
&lt;/a&gt;
  
&lt;h2 id=&#34;prototype&#34;&gt;Prototype
&lt;/h2&gt;&lt;p&gt;This is a big prototype so if it doesn&amp;rsquo;t load &lt;a class=&#34;link&#34; href=&#34;https://www.figma.com/proto/x36tgb1HAslehbHKogT9vF/T---Zach-Marino-Financial-App-Usability-Audit?page-id=319%3A395&amp;amp;node-id=319-451&amp;amp;node-type=frame&amp;amp;viewport=272%2C187%2C0.33&amp;amp;t=8FuVtr3hwI3XD2Nm-9&amp;amp;scaling=scale-down&amp;amp;content-scaling=fixed&amp;amp;starting-point-node-id=319%3A451&amp;amp;show-proto-sidebar=1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;iframe 
    src=&#34;https://www.figma.com/embed?embed_host=share&amp;amp;url=https%3A%2F%2Fwww.figma.com%2Fproto%2Fx36tgb1HAslehbHKogT9vF%2FT---Zach-Marino-Financial-App-Usability-Audit%3Fpage-id%3D319%253A395%26node-id%3D319-451%26node-type%3Dframe%26viewport%3D272%252C187%252C0.33%26t%3DPCZ0zEqWN30ec9I6-1%26scaling%3Dscale-down%26content-scaling%3Dfixed%26starting-point-node-id%3D319%253A451%26show-proto-sidebar%3D1&#34;
    style=&#34;ZgotmplZ&#34;
    width=&#34;100%&#34;
    height=&#34;700&#34;
    frameborder=&#34;0&#34;
    allowfullscreen&gt;
&lt;/iframe&gt;

</description>
        </item>
        <item>
        <title>The Ethics of Dark Patterns</title>
        <link>https://zmarino.com/posts/ethics-of-dark-patterns/</link>
        <pubDate>Fri, 01 Dec 2023 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/ethics-of-dark-patterns/</guid>
        <description>&lt;p&gt;The Ethics of Dark Patterns is a paper and final project I wrote for my Tech Regulations of Digital Platforms class (CS4973) taught by Northeastern Law professor Elettra Bieti. The paper discusses the conception and proliferation of dark patterns, and how they can potentially be regulated from both a legal and ethical standpoint.&lt;/p&gt;
&lt;p&gt;Dark patterns are defined as instances where designers use their knowledge of human behavior (e.g., psychology) and the desires of end users to implement deceptive functionality that is not in the user’s best interest &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1145/3173574.3174108&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;(Gray et al., 2018, p.1)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To read the paper, click the button below.&lt;/strong&gt; ⬇️&lt;/p&gt;

&lt;a href=&#34;The-Ethics-of-Dark-Patterns-Zach-Marino.pdf&#34; class=&#34;btn btn-primary&#34; target=&#34;_blank&#34;&gt;
    Paper
&lt;/a&gt;
  
</description>
        </item>
        <item>
        <title>MOHAI Native Stories</title>
        <link>https://zmarino.com/posts/mohai-native-stories/</link>
        <pubDate>Thu, 01 Jun 2023 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/mohai-native-stories/</guid>
        <description>&lt;img src="https://zmarino.com/posts/mohai-native-stories/MOHAI.png" alt="Featured image of post MOHAI Native Stories" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;During the first half of Summer 2023, I did a program at Northeastern’s Seattle campus, where I took a user experience design class (CS4973 is the generic special topics class code). Throughout that class, we were tasked with a design project relating to the Museum of History and Industry (MOHAI) in the South Lake Union area (by the Amazon Headquarters).&lt;/p&gt;
&lt;p&gt;In groups, our job was to propose a redesign of a certain part of the Indigenous Peoples Exhibit. My group focused on the Native American stories they had playing throughout the exhibit on screens. Our job was to reimagine how people interacted with these stories.
We completed a full cycle of the design process using common brainstorming tools like Miro and prototyping tools like Balsmiq Wireframes and Axure RP. While Figma is the primary design tool I use, this project was a good way to learn other software and expand my skill set as a designer. It was also the first time I worked on a design project with a real client as compared to a made-up scenario for a class project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To see the detailed design doc click the button below.&lt;/strong&gt; ⬇️&lt;/p&gt;

&lt;a href=&#34;MOHAI-Process-Portfolio.pdf&#34; class=&#34;btn btn-primary&#34; target=&#34;_blank&#34;&gt;
    Design Doc
&lt;/a&gt;
  
</description>
        </item>
        <item>
        <title>Where did all of the Serif Typefaces Go?</title>
        <link>https://zmarino.com/posts/where-did-all-the-serif-typefaces-go/</link>
        <pubDate>Thu, 01 Jun 2023 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/where-did-all-the-serif-typefaces-go/</guid>
        <description>&lt;img src="https://zmarino.com/posts/where-did-all-the-serif-typefaces-go/Stripes.png" alt="Featured image of post Where did all of the Serif Typefaces Go?" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Stripes is the name of the first project I completed in Design Perspectives (ARTG1001) taught by Northeastern Professor Lee Moreau during the Fall 2023 semester. The goal of this project was to document when/where you see some chosen design element or motif, and create an infographic showcasing them. I decided on serif typefaces as my &amp;ldquo;stripes&amp;rdquo; and walked through Boston looking for any serif typefaces. Unfortunately, I found little to none. I decided instead of throwing in the towel and picking a different topic, I decided to approach this from the other end: &amp;ldquo;Where did all of the serif typefaces go?&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;infographic-design&#34;&gt;Infographic Design
&lt;/h2&gt;&lt;p&gt;Serif typefaces give off a sense of credibility, opulence, and history. Considering these themes, I wanted my infographic to feel similarly luxiorious. However, considering I am framing this infographic as an investigation, I wanted to give this infographic the feeling of an investigative journalist reporting their findings. What I ended up with is a nice mixture of both.&lt;/p&gt;
&lt;p&gt;The pink accent color was chosen because it was a less saturated pink that made it feel similar to rose gold. The offset boxes highlighting important words was added to emulate the (stereotypically) sloppy highlighting of a reporter. I learned in my typography class this semester that it often works to pair a serif typeface with a sans-serif one so I decided to try that on this infographic.&lt;/p&gt;
&lt;p&gt;At least from my experience, a lot of &amp;ldquo;luxury&amp;rdquo; brands and products incorporate very provocative typography into their branding so I tried to mirror this with the large pink type in the background.&lt;/p&gt;
&lt;p&gt;The typefaces I used, Essonnes and Poppins, were chosen because they fit together aesthetically and my only criteria was pairing a serif and sans-serif typeface together.&lt;/p&gt;
&lt;h2 id=&#34;view-project&#34;&gt;View Project
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;To see the infographic click the button below.&lt;/strong&gt; ⬇️&lt;/p&gt;

&lt;a href=&#34;stripes.pdf&#34; class=&#34;btn btn-primary&#34; target=&#34;_blank&#34;&gt;
    View Infographic
&lt;/a&gt;
  
</description>
        </item>
        <item>
        <title>Two Designer Timeline</title>
        <link>https://zmarino.com/posts/two-designer-timeline/</link>
        <pubDate>Fri, 05 May 2023 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/two-designer-timeline/</guid>
        <description>&lt;img src="https://zmarino.com/posts/two-designer-timeline/2DT.png" alt="Featured image of post Two Designer Timeline" /&gt;
&lt;a href=&#34;Two-Designer-Timeline.pdf&#34; class=&#34;btn btn-primary&#34; target=&#34;_blank&#34;&gt;
    View the Timeline
&lt;/a&gt;
  
&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;The Two Designer Timeline was my final project for ARTH2215 Graphic Design History, where I had to create a timeline documenting the life of two seperate designers in an accordion-style booklet.&lt;/p&gt;
&lt;h2 id=&#34;designers&#34;&gt;Designers
&lt;/h2&gt;&lt;p&gt;The two designers I decided to research were Raymond Loewy and Carin Goldberg. Raymond Loewy is known for being the progenitor of Streamlining, and creating the streamlined and futuristic look we associate with the 1940s-60s. Carin Goldberg was an accomplished graphic designer who designed the cover for Madonna&amp;rsquo;s iconic self-titled album and the covers for many books and magazines. She sadly passed away shortly before I started working on this project from a brain tumor.&lt;/p&gt;
&lt;h2 id=&#34;timeline-design&#34;&gt;Timeline Design
&lt;/h2&gt;&lt;p&gt;The design of the timeline, while simple, conveys a lot of meaning. Following Loewys streamlining and Goldbergs simplified shapes and creative use of typography, I kept the timeline simple yet dynamic so that it is easy to read yet interesting stylistically. Besides the background, only three colors are used and they represent which events correspond to which designer or a general world event. This design language is kept consistent throughout to further ensure legibility for readers.&lt;/p&gt;
&lt;p&gt;One of my biggest struggles on this project (besides the initial artists block) was how I laid out each page. I was cramming too much into each page so the layouts felt cramped and rigid. This is still something I am actively working on as a designer, but on this project I realized this issue on my first iteration of what would be the final draft and gave my elements some breathing room in later iterations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/two-designer-timeline/2DT-old-example.png&#34;
	width=&#34;4380&#34;
	height=&#34;3286&#34;
	srcset=&#34;https://zmarino.com/posts/two-designer-timeline/2DT-old-example_hu12298975074249064036.png 480w, https://zmarino.com/posts/two-designer-timeline/2DT-old-example_hu3105550847671314470.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Old Cramped Layout&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zmarino.com/posts/two-designer-timeline/2DT-new-example.png&#34;
	width=&#34;4380&#34;
	height=&#34;3286&#34;
	srcset=&#34;https://zmarino.com/posts/two-designer-timeline/2DT-new-example_hu14658014747649385066.png 480w, https://zmarino.com/posts/two-designer-timeline/2DT-new-example_hu14971808811838690699.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New Spaced-Out Layout&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;view-project&#34;&gt;View Project
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;To view the timeline, click the button below.&lt;/strong&gt; ⬇️&lt;/p&gt;

&lt;a href=&#34;Two-Designer-Timeline.pdf&#34; class=&#34;btn btn-primary&#34; target=&#34;_blank&#34;&gt;
    Timeline
&lt;/a&gt;
  
</description>
        </item>
        <item>
        <title>The Cool Corner - Tactical Media Project</title>
        <link>https://zmarino.com/posts/tactical-media-project/</link>
        <pubDate>Mon, 01 May 2023 17:16:35 -0400</pubDate>
        
        <guid>https://zmarino.com/posts/tactical-media-project/</guid>
        <description>&lt;img src="https://zmarino.com/posts/tactical-media-project/Cool%20Corner.gif" alt="Featured image of post The Cool Corner - Tactical Media Project" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;The Cool Corner is a Tactical Media project I did as my final project for my Experience and Interaction class (ARTF2223). Geert Lovink and David Garcia define Tactical Media as &amp;ldquo;what happens when the cheap &amp;lsquo;do it yourself&amp;rsquo; media, made possible by the revolution in consumer electronics and expanded forms of distribution (from public access cable to the internet), are exploited by groups and individuals who feel aggrieved by or excluded from the wider culture…&amp;rdquo; Essentially, Tactical Media is an art movement that combines art, experimental media, and political activism.
I made my project about the closing of GeoCities from the view of an average user. The website is coded in HTML, CSS, and Javascript and is made to emulate how a GeoCities website could have looked at the time, as well as emulate how it would have felt to see your personal website break and disappear before you.
This project was a major step forward for me because up till this point my projects had been pretty surface level. &lt;/p&gt;
&lt;p&gt;Click the button below to access the project ⬇️&lt;/p&gt;

&lt;a href=&#34;../../tactical-media-project/home.html&#34; class=&#34;btn btn-primary&#34; target=&#34;_blank&#34;&gt;
    View Project
&lt;/a&gt;
  
&lt;h3 id=&#34;heading&#34;&gt;Heading
&lt;/h3&gt;</description>
        </item>
        
    </channel>
</rss>
